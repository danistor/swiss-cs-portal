// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  REPRESENTATIVE
  ADMIN
}

enum TicketStatus {
  NEW
  IN_PROGRESS
  PENDING
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Language {
  EN
  DE
  FR
  IT
}

model User {
  id              String    @id @default(cuid())
  clerkId         String    @unique
  email           String    @unique
  firstName       String?
  lastName        String?
  role            UserRole  @default(CUSTOMER)
  preferredLanguage Language @default(EN)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  createdTickets  Ticket[]  @relation("TicketCreator")
  assignedTickets Ticket[]  @relation("TicketAssignee")
  messages        Message[]
  performance     AgentPerformance[]
  
  @@index([clerkId])
}

model Ticket {
  id              String          @id @default(cuid())
  title           String
  description     String
  status          TicketStatus    @default(NEW)
  priority        TicketPriority  @default(MEDIUM)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // AI-generated fields
  autoClassification String?
  sentimentScore     Float?
  customerValueTier  String?
  
  // Relations
  creatorId       String
  creator         User            @relation("TicketCreator", fields: [creatorId], references: [id])
  assigneeId      String?
  assignee        User?           @relation("TicketAssignee", fields: [assigneeId], references: [id])
  messages        Message[]
  
  @@index([creatorId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
}

model Message {
  id              String       @id @default(cuid())
  content         String
  isFromCustomer  Boolean
  createdAt       DateTime     @default(now())
  
  // AI-generated fields
  sentimentScore  Float?
  language        Language?
  
  // Relations
  ticketId        String
  ticket          Ticket       @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  userId          String
  user            User         @relation(fields: [userId], references: [id])
  
  @@index([ticketId])
  @@index([userId])
}

model ResponseTemplate {
  id              String    @id @default(cuid())
  title           String
  content         String
  language        Language
  category        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Analytics Models
model AgentPerformance {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  date            DateTime  @default(now())
  ticketsResolved Int       @default(0)
  averageResponseTime Int   @default(0) // in minutes
  customerSatisfactionScore Float?
  
  @@index([userId])
  @@index([date])
}

model TicketMetrics {
  id              String    @id @default(cuid())
  date            DateTime  @default(now())
  newTickets      Int       @default(0)
  resolvedTickets Int       @default(0)
  averageResolutionTime Int @default(0) // in minutes
  priorityDistribution Json? // JSON object with counts by priority
  statusDistribution Json?  // JSON object with counts by status
  
  @@index([date])
}

model LanguageMetrics {
  id              String    @id @default(cuid())
  date            DateTime  @default(now())
  language        Language
  ticketCount     Int       @default(0)
  messageCount    Int       @default(0)
  
  @@index([date])
  @@index([language])
}